# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MyTeam.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(810, 539)
        MainWindow.setMinimumSize(QtCore.QSize(0, 539))
        MainWindow.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem)
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(9)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.horizontalLayout.addWidget(self.label)
        self.le1 = QtWidgets.QLineEdit(self.centralwidget)
        self.le1.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.le1.setFont(font)
        self.le1.setObjectName("le1")
        self.horizontalLayout.addWidget(self.le1)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(9)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)
        self.le2 = QtWidgets.QLineEdit(self.centralwidget)
        self.le2.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.le2.setFont(font)
        self.le2.setObjectName("le2")
        self.horizontalLayout.addWidget(self.le2)
        self.label_3 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(9)
        self.label_3.setFont(font)
        self.label_3.setObjectName("label_3")
        self.horizontalLayout.addWidget(self.label_3)
        self.le3 = QtWidgets.QLineEdit(self.centralwidget)
        self.le3.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.le3.setFont(font)
        self.le3.setObjectName("le3")
        self.horizontalLayout.addWidget(self.le3)
        self.label_4 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial Black")
        font.setPointSize(9)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout.addWidget(self.label_4)
        self.le4 = QtWidgets.QLineEdit(self.centralwidget)
        self.le4.setEnabled(False)
        font = QtGui.QFont()
        font.setPointSize(8)
        font.setBold(True)
        font.setWeight(75)
        self.le4.setFont(font)
        self.le4.setObjectName("le4")
        self.horizontalLayout.addWidget(self.le4)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.verticalLayout_3.addLayout(self.horizontalLayout)
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_3.addWidget(self.line)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        spacerItem2 = QtWidgets.QSpacerItem(78, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem2)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label_5 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setAlignment(QtCore.Qt.AlignCenter)
        self.label_5.setObjectName("label_5")
        self.verticalLayout.addWidget(self.label_5)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setMinimumSize(QtCore.QSize(231, 41))
        self.groupBox.setTitle("")
        self.groupBox.setAlignment(QtCore.Qt.AlignCenter)
        self.groupBox.setObjectName("groupBox")
        self.rb1 = QtWidgets.QRadioButton(self.groupBox)
        self.rb1.setGeometry(QtCore.QRect(20, 10, 51, 20))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.rb1.setFont(font)
        self.rb1.setObjectName("rb1")
        self.rb2 = QtWidgets.QRadioButton(self.groupBox)
        self.rb2.setGeometry(QtCore.QRect(90, 10, 51, 20))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.rb2.setFont(font)
        self.rb2.setObjectName("rb2")
        self.rb3 = QtWidgets.QRadioButton(self.groupBox)
        self.rb3.setGeometry(QtCore.QRect(160, 10, 41, 20))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.rb3.setFont(font)
        self.rb3.setObjectName("rb3")
        self.rb4 = QtWidgets.QRadioButton(self.groupBox)
        self.rb4.setGeometry(QtCore.QRect(220, 10, 51, 20))
        font = QtGui.QFont()
        font.setPointSize(7)
        self.rb4.setFont(font)
        self.rb4.setObjectName("rb4")
        
        self.rb1.toggled.connect(self.ctg)
        self.rb2.toggled.connect(self.ctg)
        self.rb3.toggled.connect(self.ctg)
        self.rb4.toggled.connect(self.ctg)
        
        self.verticalLayout.addWidget(self.groupBox)
        self.list1 = QtWidgets.QListWidget(self.centralwidget)
        
        self.list1.setStyleSheet("color: rgb(85, 85, 85);")
        self.list1.setObjectName("list1")
        self.list1.itemDoubleClicked.connect(self.removelist1)
        self.verticalLayout.addWidget(self.list1)
        self.btn1 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btn1.setFont(font)
        self.btn1.setObjectName("btn1")
        self.verticalLayout.addWidget(self.btn1)
        self.horizontalLayout_2.addLayout(self.verticalLayout)
        spacerItem3 = QtWidgets.QSpacerItem(78, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem3)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_6 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.verticalLayout_2.addWidget(self.label_6)
        self.ql = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.ql.setFont(font)
        self.ql.setStyleSheet("color: rgb(85, 85, 85);")

        self.ql.setAlignment(QtCore.Qt.AlignCenter)
        self.ql.setObjectName("ql")
        self.verticalLayout_2.addWidget(self.ql)
        self.list2 = QtWidgets.QListWidget(self.centralwidget)
        self.list2.setObjectName("list2")
        self.list2.itemDoubleClicked.connect(self.removelist2)
        self.verticalLayout_2.addWidget(self.list2)
        self.btn2 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setPointSize(10)
        font.setBold(True)
        font.setWeight(75)
        self.btn2.setFont(font)
        self.btn2.setStyleSheet("")
        self.btn2.setObjectName("btn2")
        self.verticalLayout_2.addWidget(self.btn2)
        self.horizontalLayout_2.addLayout(self.verticalLayout_2)
        spacerItem4 = QtWidgets.QSpacerItem(58, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_2.addItem(spacerItem4)
        self.verticalLayout_3.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem5 = QtWidgets.QSpacerItem(358, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.exit = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exit.sizePolicy().hasHeightForWidth())
        self.exit.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.exit.setFont(font)
        self.exit.setAutoDefault(False)
        self.exit.setFlat(False)
        self.exit.setObjectName("exit")
        self.exit.clicked.connect(self.quit)
        self.horizontalLayout_3.addWidget(self.exit)
        spacerItem6 = QtWidgets.QSpacerItem(308, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem6)
        self.verticalLayout_3.addLayout(self.horizontalLayout_3)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 810, 26))
        self.menubar.setObjectName("menubar")
        self.menuManage_Team = QtWidgets.QMenu(self.menubar)
        self.menuManage_Team.setObjectName("menuManage_Team")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionNew_Team = QtWidgets.QAction(MainWindow)
        self.actionNew_Team.setObjectName("actionNew_Team")
        self.actionSave_Team = QtWidgets.QAction(MainWindow)
        self.actionSave_Team.setObjectName("actionSave_Team")
        self.actionSave_Team_2 = QtWidgets.QAction(MainWindow)
        self.actionSave_Team_2.setObjectName("actionSave_Team_2")
        self.actionTeam_Score = QtWidgets.QAction(MainWindow)
        self.actionTeam_Score.setObjectName("actionTeam_Score")
        self.actionRules = QtWidgets.QAction(MainWindow)
        self.actionRules.setObjectName("actionRules")
        self.actionInstructions = QtWidgets.QAction(MainWindow)
        self.actionInstructions.setObjectName("actionInstructions")
        self.actionPoints = QtWidgets.QAction(MainWindow)
        self.actionPoints.setObjectName("actionPoints")
        self.menuManage_Team.addAction(self.actionNew_Team)
        self.menuManage_Team.addAction(self.actionSave_Team)
        self.menuManage_Team.addAction(self.actionSave_Team_2)
        self.menuManage_Team.addAction(self.actionTeam_Score)
        self.menuManage_Team.triggered[QtWidgets.QAction].connect(self.menufunction)
        self.menuHelp.addAction(self.actionRules)
        self.menuHelp.addAction(self.actionInstructions)
        self.menuHelp.addAction(self.actionPoints)
        self.menubar.addAction(self.menuManage_Team.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.actionInstructions.triggered.connect(self.instructions)
        self.actionPoints.triggered.connect(self.points)
        self.actionRules.triggered.connect(self.rules)
        # Declaration of class attributes
        self.bat=0
        self.bwl=0
        self.ar=0
        self.wk=0
        self.avl=1000
        self.used=0

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        MainWindow.customContextMenuRequested.connect(self.context_menu)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MyTeam Selector"))
        self.label.setText(_translate("MainWindow", "Batsmen"))
        self.label_2.setText(_translate("MainWindow", "Bowlers"))
        self.label_3.setText(_translate("MainWindow", "All Rounders"))
        self.label_4.setText(_translate("MainWindow", "Wicket-Keeper"))
        self.label_5.setText(_translate("MainWindow", "Players Categories"))
        self.rb1.setText(_translate("MainWindow", "BAT"))
        self.rb2.setText(_translate("MainWindow", "BOW"))
        self.rb3.setText(_translate("MainWindow", "AR"))
        self.rb4.setText(_translate("MainWindow", "WK"))
        self.btn1.setText(_translate("MainWindow", "Available Points: 1000"))
        self.label_6.setText(_translate("MainWindow", "Selected players"))
        self.ql.setText(_translate("MainWindow", "???"))
        self.btn2.setText(_translate("MainWindow", "Used Points: "))
        self.exit.setText(_translate("MainWindow", "Exit"))
        self.exit.setShortcut(_translate("MainWindow", "Alt+E"))
        self.menuManage_Team.setTitle(_translate("MainWindow", "Manage Team"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.actionNew_Team.setText(_translate("MainWindow", "New Team"))
        self.actionNew_Team.setShortcut(_translate("MainWindow", "Alt+N"))
        self.actionSave_Team.setText(_translate("MainWindow", "Open Team"))
        self.actionSave_Team.setShortcut(_translate("MainWindow", "Alt+O"))
        self.actionSave_Team_2.setText(_translate("MainWindow", "Save Team"))
        self.actionSave_Team_2.setShortcut(_translate("MainWindow", "Alt+S"))
        self.actionTeam_Score.setText(_translate("MainWindow", "Team Score"))
        self.actionTeam_Score.setShortcut(_translate("MainWindow", "Alt+T"))
        self.actionRules.setText(_translate("MainWindow", "Rules"))
        self.actionInstructions.setText(_translate("MainWindow", "Instructions"))
        self.actionPoints.setText(_translate("MainWindow", "Points "))
        
    def menufunction(self, action):
            """
            action: The option selected from menu.
            function: Performs the selected option.
            """
            txt = action.text()
            if txt == "New Team":       # Reset the class attributes
                    self.bat = 0
                    self.bwl = 0
                    self.ar = 0
                    self.wk = 0
                    self.avl = 1000
                    self.used = 0
                    self.list1.clear()
                    self.list2.clear()
                    self.ql.setText("???")
                    self.showstatus()
                    text, ok = QtWidgets.QInputDialog.getText(MainWindow, 'Team Selector', 'Enter name of team:')
                    if ok:
                            self.ql.setText(str(text))
            if txt == 'Save Team':
                    # Iterate over the selected players list to create a string of player names separated by commas
                    selected = ""
                    count = self.list2.count()
                    for i in range(count):
                            selected = selected + self.list2.item(i).text()
                            if i < count - 1:
                                    selected = selected + ","
                    self.saveteam(self.ql.text(), selected, self.used)
            if txt == "Open Team":
                    # Reset the class attributes
                    self.bat = 0
                    self.bwl = 0
                    self.ar = 0
                    self.wk = 0
                    self.avl = 1000
                    self.used = 0
                    self.list1.clear()
                    self.list2.clear()
                    self.ql.setText("???")
                    self.showstatus()
                    self.openteam()
            if txt == "Team Score":
                    from scoredlg import Ui_Dialog
                    Dialog = QtWidgets.QDialog()
                    ui = Ui_Dialog()
                    ui.setupUi(Dialog)
                    ret = Dialog.exec()

    def saveteam(self, nm, string, val):
            """
            nm: Name of team
            string: List of players in team separated by commas
            val: Points used out of 1000
            Function: Make entry for new team inside database
            """
            # If total players is not 11, show error pop up
            if self.bat + self.bwl + self.ar + self.wk != 11:
                    self.showdlg("Insufficient players")
                    return
            sql = "INSERT INTO teams (name, players, value) VALUES ('" + nm + "','" + string + "','" + str(val) + "');"
            try:
                    cur = db.execute(sql)
                    db.commit()
                    self.showdlg("Team Saved successfully")
            except:
                    self.showdlg("Error in operation")
                    db.rollback()

    def openteam(self):
            sql = "select name from teams"
            cur = db.execute(sql)
            teams = []
            for row in cur:
                    teams.append(row[0])
            team, ok = QtWidgets.QInputDialog.getItem(MainWindow, "Team Selector",
                                                      "Choose a team", teams, 0, False)
            if ok and team:
                    self.ql.setText(team)
            sql1 = "select players, value from teams where name='" + team + "'"
            cur = db.execute(sql1)
            row = cur.fetchone()
            # Separate player names by comma and store them in a list
            selected = row[0].split(',')
            # Populate list2 with the names of selected players
            self.list2.addItems(selected)
            self.used = row[1]
            self.avl = 1000 - row[1]
            count = self.list2.count()
            # Iterate over selected players to count number of players in each category
            for i in range(count):
                    player = self.list2.item(i).text()
                    sql = "select ctg from stats where player='" + player + "'"
                    cur = db.execute(sql)
                    row = cur.fetchone()
                    ctgr = row[0]
                    if ctgr == "BAT": self.bat += 1
                    if ctgr == "BWL": self.bwl += 1
                    if ctgr == "AR": self.ar += 1
                    if ctgr == "WK": self.wk += 1

            self.showstatus()

    def context_menu(MainWindow):
        MainWindow.menu = QtWidgets.QMenu()
        MainWindow.menu.addAction("Profile")
        MainWindow.menu.triggered[QtWidgets.QAction].connect(MainWindow.menuManage_Team)
        MainWindow.menu.exec_(QtGui.QCursor.pos())

    def fillList(self, ctgr):
            """
            ctgr: Category of players
            Function: Populate list1 with players of given category
            """
            #If name of team is not already selected, show error pop up
            if self.ql.text() == '???':
                    self.showdlg("Enter name of team")
                    return
            self.list1.clear()
            cursor = db.execute("SELECT player from stats where ctg='" + ctgr + "'")
            for row in cursor:
                    selected = []
                    for i in range(self.list2.count()):
                            selected.append(self.list2.item(i).text())
                    if row[0] not in selected: self.list1.addItem(row[0])

    def ctg(self):
            ctgr = ''
            if self.rb1.isChecked() == True: ctgr = 'BAT'
            if self.rb2.isChecked() == True: ctgr = 'BWL'
            if self.rb3.isChecked() == True: ctgr = 'AR'
            if self.rb4.isChecked() == True: ctgr = 'WK'

            self.fillList(ctgr)

    def criteria(self, ctgr, item):
            """
            ctgr: Category of player
            Function: Check for criterion for each category and show appropriate error pop up
            """
            msg = ''
            if ctgr == "BAT" and self.bat >= 5: msg = "Batsmen not more than 5"
            if ctgr == "BWL" and self.bwl >= 5: msg = "bowlers not more than 5"
            if ctgr == "AR" and self.ar >= 3: msg = "Allrounders not more than 3"
            if ctgr == "WK" and self.wk >= 1: msg = "Wicketkeepers not more than 1"
            if msg != '' or self.avl <= 0:
                    msg = 'You have exhausted your points'
                    self.showdlg(msg)
                    return False

            if ctgr == "BAT": self.bat += 1
            if ctgr == "BWL": self.bwl += 1
            if ctgr == "AR": self.ar += 1
            if ctgr == "WK": self.wk += 1
            cursor = db.execute("SELECT player,value from stats where player='" + item.text() + "'")
            row = cursor.fetchone()
            self.avl = self.avl - int(row[1])
            self.used = self.used + int(row[1])
            return True

    def showstatus(self):
            """
            Function: Show available and used points
            """
            self.le1.setText(str(self.bat))
            self.le2.setText(str(self.bwl))
            self.le3.setText(str(self.ar))
            self.le4.setText(str(self.wk))
            self.btn1.setText("Available Points : {}".format(self.avl))
            self.btn2.setText("Points used : {}".format(self.used))

    def removelist1(self, item):
            """
            Function: Remove players from list1 and add them to list2
            """
            ctgr = ''
            if self.rb1.isChecked() == True: ctgr = 'BAT'
            if self.rb2.isChecked() == True: ctgr = 'BWL'
            if self.rb3.isChecked() == True: ctgr = 'AR'
            if self.rb4.isChecked() == True: ctgr = 'WK'
            ret = self.criteria(ctgr, item)
            if ret == True:
                    self.list1.takeItem(self.list1.row(item))
                    self.list2.addItem(item.text())
                    self.showstatus()

    def showdlg(self, msg):
            """
            msg: Message to be shown in the dialog box
            Function: Show the dialog box with msg
            """
            Dialog = QtWidgets.QMessageBox()
            Dialog.setText(msg)
            Dialog.setWindowTitle("Team Selector")
            ret = Dialog.exec()

    def removelist2(self, item):
            """
            Remove players from list2 and add them back to list1
            """
            self.list2.takeItem(self.list2.row(item))

            cursor = db.execute("SELECT player,value, ctg from stats where player='" + item.text() + "'")
            row = cursor.fetchone()
            self.avl = self.avl + int(row[1])
            self.used = self.used - int(row[1])
            ctgr = row[2]
            if ctgr == "BAT":
                    self.bat -= 1
                    if self.rb1.isChecked() == True: self.list1.addItem(item.text())
            if ctgr == "BWL":
                    self.bwl -= 1
                    if self.rb2.isChecked() == True: self.list1.addItem(item.text())
            if ctgr == "AR":
                    self.ar -= 1
                    if self.rb3.isChecked() == True: self.list1.addItem(item.text())
            if ctgr == "WK":
                    self.wk -= 1
                    if self.rb4.isChecked() == True: self.list1.addItem(item.text())
            self.showstatus()


    def instructions(self):
        mess = QtWidgets.QMessageBox()
        mess.setWindowTitle('Welcome to Cricket Fantasy Game')
        message = '''\t\bHere are some Instructions:\b\n
        1. Select 'New Team' in 'Manage Team' or Click alt+N to Create Team\n
        2. Select 'Open Team' in 'Manage Team' or Click alt+O to Open Team\n
        3. Select 'Save Team' in 'Manage Team' or Click alt+S to Save Team\n
        4. Select 'Team Score' in 'Manage Team' or Click alt+T to Team Score'''
        mess.setText(message)
        mess.setStandardButtons(QtWidgets.QMessageBox.Ok)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        mess.setFont(font)
        mess.exec_()

    def rules(self):
        mess=QtWidgets.QMessageBox()
        mess.setWindowTitle('Welcome To Cricket Fantasy Game')
        message='''\t\b Here are some Rules:\b\n
        1.You can take minimum 3 Batsmen and Maximum 5 Batsmen in a Team\n
        2.You can take Minimum 3 Bowler and Maximum 5 Bowler in a Team\n
        3.You can take Minimum 1 Wicketkeeper and Maximum 1 Wicketkeeper in a Team\n
        4.You can take Minimum 1 All Rounder and Maximum 3 All Rounder in a Team'''
        mess.setText(message)
        mess.setStandardButtons(QtWidgets.QMessageBox.Ok)
        font=QtGui.QFont()
        font.setFamily("Comic Sans MS")
        mess.setFont(font)
        mess.exec_()
        
    def points(self):
        mess=QtWidgets.QMessageBox()
        mess.setWindowTitle("Welcome to Cricket Fantasy Game")
        message='''\t\b Here are Points Table:\b\n                        
        Batting\n                      
        ● 1 point for 2 runs scored\n
        ● Additional 5 points for half century and Additional 10 points for century\n
        ● 2 points for strike rate (runs/balls faced) of 80-100 and Additional 4 points for strike rate>100\n
        ● 1 point for hitting a boundary (four) and 2 points for over boundary (six)\n               
        Bowling\n                
        ● 10 points for each wicket\n
        ● Additional 5 points for three wickets per innings and Additional 10 points for 5 wickets or more in innings\n
        ● 4 points for economy rate (runs given per over) between 3.5 and 4.5\n
        ● 7 points for economy rate between 2 and 3.5 and 10 points for economy rate less than 2\n        
        Fielding\n              
        ● 10 points each for catch/stumping/run out'''
        mess.setText(message)
        mess.setStandardButtons(QtWidgets.QMessageBox.Ok)
        font = QtGui.QFont()
        font.setFamily("Comic Sans MS")
        mess.setFont(font)
        mess.exec_()


    def quit(self):
        msg=QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Critical)
        message="Bye Bye!!"
        msg.setText(message)
        msg.setStandardButtons(QtWidgets.QMessageBox.Ok)
        msg.exec_()
        sys.exit()

if __name__ == "__main__":
        import sqlite3
        db = sqlite3.connect('cricket.db')
        #print("Opened database successfully")
        import sys
        app = QtWidgets.QApplication(sys.argv)
        MainWindow = QtWidgets.QMainWindow()
        ui = Ui_MainWindow()
        ui.setupUi(MainWindow)
        MainWindow.show()
        sys.exit(app.exec_())        

